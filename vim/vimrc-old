if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'				" config pending check
Plug 'ctrlpvim/ctrlp.vim'				    " config pending check
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'stsewd/fzf-checkout.vim'

Plug 'jremmen/vim-ripgrep'

Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'

Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --gocode-completer' }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'scrooloose/syntastic'

Plug 'mbbill/undotree'

Plug 'sheerun/vim-polyglot'

Plug 'morhetz/gruvbox'          			" color schema
Plug 'chriskempson/base16-vim'  			" color schema

Plug 'octol/vim-cpp-enhanced-highlight'			" C++ specific
Plug 'lyuts/vim-rtags'                  " C++ specific

Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }	" Go specific

Plug 'vim-scripts/indentpython.vim'			" Python specific
Plug 'nvie/vim-flake8'					" Python specific

Plug 'junegunn/goyo.vim'				" Markdown specific

Plug 'ap/vim-css-color'					" CSS specific

call plug#end()

"
" Plug settings
"
set nocompatible                " be iMproved, required
filetype off                    " required
filetype plugin indent on       " required

"
" Settings
"
set noerrorbells                " No beeps
set number                      " Show line numbers
set backspace=indent,eol,start  " Makes backspace key more powerful.
set showcmd                     " Show me what I'm typing.
set showmode                    " Show current mode.


set noswapfile                  " Don't use swapfile
set nobackup            	      " Don't create annoying backup files.
set undodir=~/.vim/undodir      " Directory to save undo files.
set undofile                    " Create an undo file per each file.
set splitright                  " Split vertical windows right to the current windows
set splitbelow                  " Split horizontal windows below to the current windows
set encoding=utf-8              " Set default encoding to UTF-8
set autowrite                   " Automatically save before :next, :make etc.
set autoread                    " Automatically reread changed files without asking me anything
set laststatus=2                " Lightline configuration
set hidden
set colorcolumn=80
set scrolloff=8

set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set smartindent                 " Improved identation.
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not when search pattern contains upper case characters
set ttyfast
set ttymouse=xterm2
set ttyscroll=3

set lazyredraw          		" Wait to redraw "

" speed up syntax highlighting
set nocursorcolumn
set nocursorline

syntax sync minlines=256
set synmaxcol=300
set re=1
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

set t_ut=			" tmux hack

if has("gui_macvim")
" No toolbars, menu or scrollbars in the GUI
  set guifont=Source\ Code\ Pro\ Light:h12
  set clipboard+=unnamed
  set vb t_vb=
  set guioptions-=m             " no menu
  set guioptions-=T             " no toolbar
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r             "no scrollbar
  set guioptions-=R
endif

syntax enable

let base16colorspace=256
colorscheme base16-tomorrow-night


" ----------------------------------------- "
" Mappings			    					"
" ----------------------------------------- "
let mapleader = ","
let g:mapleader = ","

" put quickfix window always to the bottom
autocmd FileType qf wincmd J

" Fast saving
nnoremap <leader>w :w!<cr>
nnoremap <silent> <leader>q :q!<CR>

" Print full path
map <C-f> :echo expand("%:p")<cr>)

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
if !has('gui_running')
    set notimeout
    set ttimeout
    set ttimeoutlen=10
    augroup FastEscape
	autocmd!
	au InsertEnter * set timeoutlen=0
	au InsertLeave * set timeoutlen=1000
    augroup END
endif

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" Resize splits when the window is resized
au VimResized * :wincmd =

" Move between windows
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>u :UndotreeShow<CR>
nmap <leader>pf :CtrlP<CR>
nnoremap <leader>ps :Rg<SPACE>


" ----------------------------------------- "
" File Type settings 			    		"
" ----------------------------------------- "
au BufNewFile,BufRead *.cxx setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.cpp setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.hxx setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.hpp setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.ixx setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.ipp setlocal noet ts=4 sw=4 sts=4

au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.ino setlocal noet ts=4 sw=4 sts=4

au BufNewFile,BufRead *.py setlocal expandtab ts=4 sw=4 sts=4

au BufNewFile,BufRead *.vim setlocal expandtab ts=4 sw=4
au BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
au BufNewFile,BufRead *.md setlocal noet ts=4 sw=4

autocmd FileType json setlocal expandtab ts=2 sw=2
autocmd FileType ruby setlocal expandtab ts=2 sw=2

augroup filetypedetect
  au BufNewFile,BufRead .tmux.conf*,tmux.conf* setf tmux
augroup END

fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

augroup dvladek
  autocmd!
  autocmd BufWritePre * :call TrimWhitespace()
augroup END

" Wildmenu completion {{{
set wildmenu
" set wildmode=list:longest
set wildmode=list:full

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=migrations                       " Django migrations
set wildignore+=go/pkg                       	 " Go static files
set wildignore+=go/bin                       	 " Go bin files
set wildignore+=go/bin-vagrant               	 " Go bin-vagrant files
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files


" ----------------------------------------- "
" Plugin configs			    			"
" ----------------------------------------- "

" ==================== Lightline ====================
" Some minimal options to add git and stile to the line.
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }


" ==================== NerdTree ====================
" Open nerdtree in current dir, write our own custom function because
" NerdTreeToggle just sucks and doesn't work for buffers
noremap <Leader>n :NERDTreeToggle<cr>
noremap <Leader>f :NERDTreeFind<cr>

let NERDTreeShowHidden = 1


" ==================== Tagbar ====================
nmap <F8> :TagbarToggle<CR>


" ==================== Fugitive ====================
vnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gb :Gblame<CR>

nmap <leader>gh :diffget //3<CR>
nmap <leader>gu :diffget //2<CR>
nmap <leader>gs :G<CR>


" ==================== fzf ====================
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let $FZF_DEFAULT_OPTS='--reverse'
nnoremap <leader>gc :GCheckout<CR>
nnoremap <C-p> :GFiles<CR>


" ==================== ripgrep ====================
if executable('rg')
  let g:rg_derive_root='true'
endif


" ==================== cTags ====================
let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8_1/bin/ctags'


" ==================== delimitMate ====================
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'

imap <expr> <CR> pumvisible() ? "\<c-y>" : "<Plug>delimitMateCR"


" ==================== YouCompleteMe ====================
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_goto_buffer_command = 'split-or-existing-window'

let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

au FileType c,cpp,cxx,h,hpp,hxx,ipp,ixx nmap <Leader>gd :rightbelow vertical YcmCompleter GoTo<CR>
" au FileType c,cpp,cxx,h,hpp,hxx,ipp,ixx nmap <Leader>gc :rightbelow vertical YcmCompleter GoToDeclaration<CR>
" au FileType c,cpp,cxx,h,hpp,hxx,ipp,ixx nmap <Leader>gf :rightbelow vertical YcmCompleter GoToDefinition<CR>
" au FileType c,cpp,cxx,h,hpp,hxx,ipp,ixx nmap <Leader>gi :rightbelow vertical YcmCompleter GoToInclude<CR>
" au FileType c,cpp,cxx,h,hpp,hxx,ipp,ixx nmap <Leader>gr :YcmCompleter RefactorRename<CR>


" ==================== Syntastic ====================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['flake8']

let g:syntastic_mode_map = {
	\ "mode": "active",
	\ "passive_filetypes": ["html"] }



" ============ Vim-cpp-enhanced-highlight ============
let g:cpp_concepts_highlight = 1
let g:cpp_class_scope_highlight = 1


" ==================== Vim-go ====================
let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_auto_type_info = 1

let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0

let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_format_strings = 1

au FileType go nmap <Leader>s <Plug>(go-def-split)
au FileType go nmap <Leader>v <Plug>(go-def-vertical)
au FileType go nmap <Leader>in <Plug>(go-info)
au FileType go nmap <Leader>ii <Plug>(go-implements)

au FileType go nmap <Leader>r  <Plug>(go-run)
au FileType go nmap <Leader>b  <Plug>(go-build)
au FileType go nmap <Leader>g  <Plug>(go-gbbuild)
au FileType go nmap <Leader>t  <Plug>(go-test-compile)
au FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
au FileType go nmap <Leader>d <Plug>(go-doc)
au FileType go nmap <Leader>f :GoImports<CR>
au FileType go nmap <Leader>l :GoLint<CR>



" ==================== Vim-flake8 ====================
autocmd BufRead,BufNewFile *.py let python_highlight_all=1
autocmd BufRead,BufNewFile *.py let python_highlight_space_errors=0


" ==================== CtrlP ====================
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'et'  " jump to a file if it's open already
let g:ctrlp_mruf_max=450    " number of recently opened files
let g:ctrlp_max_files=0     " do not limit the number of searchable files
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_match_window = 'bottom,order:btt,max:10,results:10'
let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ftv'}

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

func! MyCtrlPTag()
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
        \ 'AcceptSelection("t")': ['<c-t>'],
        \ }
  CtrlPBufTag
endfunc
command! MyCtrlPTag call MyCtrlPTag()


nmap <C-b> :CtrlPCurWD<cr>
imap <C-b> <esc>:CtrlPCurWD<cr>


" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
